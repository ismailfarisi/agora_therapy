rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isOwner(resourceUserId) {
      return request.auth.uid == resourceUserId;
    }
    
    function isTherapist() {
      return getUserRole() == 'therapist';
    }
    
    function isClient() {
      return getUserRole() == 'client';
    }
    
    function isAdmin() {
      return getUserRole() == 'admin';
    }
    
    function validateUserCreate() {
      let requiredFields = ['email', 'profile', 'role', 'status', 'preferences', 'metadata'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.role in ['client', 'therapist', 'admin'] &&
             request.resource.data.status in ['active', 'inactive', 'suspended'];
    }
    
    function validateUserUpdate() {
      // Prevent role changes except by admin
      return !('role' in request.resource.data.diff(resource.data).affectedKeys()) ||
             isAdmin();
    }
    
    function validateAppointmentCreate() {
      let requiredFields = ['therapistId', 'clientId', 'scheduledFor', 'timeSlotId', 'duration', 'status'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.status in ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled', 'no_show'] &&
             request.resource.data.clientId == request.auth.uid;
    }
    
    function validateAppointmentUpdate() {
      // Only allow certain status changes based on role
      let statusChanges = request.resource.data.diff(resource.data).affectedKeys();
      return !statusChanges.hasAny(['status']) || 
             (isTherapist() && request.resource.data.therapistId == request.auth.uid) ||
             (isClient() && request.resource.data.clientId == request.auth.uid) ||
             isAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && 
                  (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && 
                    isOwner(userId) && 
                    validateUserCreate();
      allow update: if isAuthenticated() && 
                    (isOwner(userId) || isAdmin()) && 
                    validateUserUpdate();
      allow delete: if isAdmin();
    }
    
    // Therapist profiles - publicly readable for browsing, writable by owner
    match /therapistProfiles/{therapistId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && 
                           (isOwner(therapistId) || isAdmin()) &&
                           isTherapist();
      allow delete: if isAdmin();
    }
    
    // Appointments - readable by participants, creatable by clients
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.clientId) || 
                   isOwner(resource.data.therapistId) || 
                   isAdmin());
      allow create: if isAuthenticated() && 
                    isClient() && 
                    validateAppointmentCreate();
      allow update: if isAuthenticated() && 
                    (isOwner(resource.data.clientId) || 
                     isOwner(resource.data.therapistId) || 
                     isAdmin()) &&
                    validateAppointmentUpdate();
      allow delete: if isAdmin();
    }
    
    // Therapist availability - readable by all, writable by therapist
    match /therapistAvailability/{docId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && 
                           isOwner(resource.data.therapistId) && 
                           isTherapist();
      allow delete: if isAuthenticated() && 
                    (isOwner(resource.data.therapistId) || isAdmin());
    }
    
    // Schedule overrides - readable by all, writable by therapist
    match /scheduleOverrides/{docId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && 
                           isOwner(resource.data.therapistId) && 
                           isTherapist();
      allow delete: if isAuthenticated() && 
                    (isOwner(resource.data.therapistId) || isAdmin());
    }
    
    // Time slots - read-only reference data, writable only by admin
    match /timeSlots/{slotId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Audit logs - read/write only by admin
    match /auditLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Notifications - readable by recipient, writable by system/admin
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.userId) || isAdmin());
      allow create, update: if isAdmin();
      allow delete: if isAuthenticated() && 
                    (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Payment intents - readable by client and therapist involved
    match /paymentIntents/{paymentId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.clientId) || 
                   isOwner(resource.data.therapistId) || 
                   isAdmin());
      allow create, update: if isAuthenticated() && 
                           (isOwner(resource.data.clientId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Subcollection rules
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
                        (isOwner(userId) || isAdmin());
    }
    
    match /appointments/{appointmentId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
                  (isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.clientId) ||
                   isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.therapistId) ||
                   isAdmin());
      allow create: if isAuthenticated() && 
                    (isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.clientId) ||
                     isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.therapistId));
    }
  }
}