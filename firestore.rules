rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Enhanced Helper functions with video session support
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return isAuthenticated() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null;
    }
    
    function isOwner(resourceUserId) {
      return isAuthenticated() && request.auth.uid == resourceUserId;
    }
    
    function isTherapist() {
      return isAuthenticated() && getUserRole() == 'therapist';
    }
    
    function isClient() {
      return isAuthenticated() && getUserRole() == 'client';
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    // Video session security functions
    function isAppointmentParticipant(appointmentData) {
      return isAuthenticated() &&
        (appointmentData.clientId == request.auth.uid ||
         appointmentData.therapistId == request.auth.uid);
    }
    
    function canAccessVideoSession(appointmentData) {
      return isAppointmentParticipant(appointmentData) &&
        appointmentData.status == 'confirmed' &&
        appointmentData.session.type == 'video';
    }
    
    function isVideoSessionActive(appointmentData) {
      return canAccessVideoSession(appointmentData) &&
        // Allow access 30 minutes before to 30 minutes after appointment
        request.time >= appointmentData.scheduledFor - duration.value(30, 'm') &&
        request.time <= appointmentData.scheduledFor + duration.value(appointmentData.duration + 30, 'm');
    }
    
    function validateUserCreate() {
      let requiredFields = ['email', 'profile', 'role', 'status', 'preferences', 'metadata'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.role in ['client', 'therapist', 'admin'] &&
             request.resource.data.status in ['active', 'inactive', 'suspended'];
    }
    
    function validateUserUpdate() {
      // Prevent role changes except by admin
      return !('role' in request.resource.data.diff(resource.data).affectedKeys()) ||
             isAdmin();
    }
    
    function validateAppointmentCreate() {
      let requiredFields = ['therapistId', 'clientId', 'scheduledFor', 'timeSlotId', 'duration', 'status'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.status in ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled', 'no_show'] &&
             request.resource.data.clientId == request.auth.uid &&
             // Prevent clients from setting sensitive session data
             !request.resource.data.keys().hasAny(['session.channelId', 'session.accessToken']);
    }
    
    function validateAppointmentUpdate() {
      // Enhanced validation for video session data
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      
      // Basic status changes
      return (affectedKeys.hasAny(['status']) && 
              ((isTherapist() && request.resource.data.therapistId == request.auth.uid) ||
               (isClient() && request.resource.data.clientId == request.auth.uid) ||
               isAdmin())) ||
             // Session credential updates (only system/admin)
             (affectedKeys.hasAny(['session.channelId', 'session.accessToken', 'session.joinUrl']) && 
              isAdmin()) ||
             // Session state updates during active sessions
             (affectedKeys.hasAny(['session.connectionStatus', 'session.qualityMetrics']) && 
              isVideoSessionActive(resource.data)) ||
             // Allow other updates
             !affectedKeys.hasAny(['status', 'session.channelId', 'session.accessToken', 'session.joinUrl', 'session.connectionStatus', 'session.qualityMetrics']);
    }
    
    // Users collection - simplified for initial user creation
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if false; // No user deletion allowed
    }
    
    // Therapist profiles - publicly readable for browsing, writable by owner
    match /therapistProfiles/{therapistId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && 
                           (isOwner(therapistId) || isAdmin()) &&
                           isTherapist();
      allow delete: if isAdmin();
    }
    
    // Appointments - enhanced for video sessions with sensitive data protection
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() &&
                  (isOwner(resource.data.clientId) ||
                   isOwner(resource.data.therapistId) ||
                   isAdmin());
      
      allow create: if isAuthenticated() &&
                    isClient() &&
                    validateAppointmentCreate();
      
      allow update: if isAuthenticated() &&
                    (isOwner(resource.data.clientId) ||
                     isOwner(resource.data.therapistId) ||
                     isAdmin()) &&
                    validateAppointmentUpdate();
      
      allow delete: if isAdmin();
      
      // Video session credentials - highly restricted subcollection
      match /sessionCredentials/{credentialId} {
        allow read: if isVideoSessionActive(get(/databases/$(database)/documents/appointments/$(appointmentId)).data) &&
                    isAppointmentParticipant(get(/databases/$(database)/documents/appointments/$(appointmentId)).data);
        allow write: if isAdmin(); // Only system can write credentials
      }
      
      // Session monitoring data
      match /sessionMetrics/{metricId} {
        allow read: if isAppointmentParticipant(get(/databases/$(database)/documents/appointments/$(appointmentId)).data) ||
                    isAdmin();
        allow create: if isAppointmentParticipant(get(/databases/$(database)/documents/appointments/$(appointmentId)).data);
        allow update: if isAppointmentParticipant(get(/databases/$(database)/documents/appointments/$(appointmentId)).data) &&
                      request.resource.data.diff(resource.data).affectedKeys()
                        .hasOnly(['connectionQuality', 'participantCount', 'duration', 'updatedAt']);
        allow delete: if isAdmin();
      }
      
      // Enhanced message subcollection with video session context
      match /messages/{messageId} {
        allow read: if isAuthenticated() &&
                    (isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.clientId) ||
                     isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.therapistId) ||
                     isAdmin());
        allow create: if isAuthenticated() &&
                      (isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.clientId) ||
                       isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.therapistId));
        allow update: if isAuthenticated() &&
                      isOwner(resource.data.senderId);
        allow delete: if isAdmin();
      }
    }
    
    // Therapist availability - readable by all, writable by therapist
    match /therapistAvailability/{docId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && 
                           isOwner(resource.data.therapistId) && 
                           isTherapist();
      allow delete: if isAuthenticated() && 
                    (isOwner(resource.data.therapistId) || isAdmin());
    }
    
    // Schedule overrides - readable by all, writable by therapist
    match /scheduleOverrides/{docId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated() && 
                           isOwner(resource.data.therapistId) && 
                           isTherapist();
      allow delete: if isAuthenticated() && 
                    (isOwner(resource.data.therapistId) || isAdmin());
    }
    
    // Time slots - read-only reference data, writable only by admin
    match /timeSlots/{slotId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Audit logs - read/write only by admin
    match /auditLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Notifications - readable by recipient, writable by system/admin
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.userId) || isAdmin());
      allow create, update: if isAdmin();
      allow delete: if isAuthenticated() && 
                    (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Payment intents - readable by client and therapist involved
    match /paymentIntents/{paymentId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.clientId) || 
                   isOwner(resource.data.therapistId) || 
                   isAdmin());
      allow create, update: if isAuthenticated() && 
                           (isOwner(resource.data.clientId) || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Subcollection rules
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if isAuthenticated() && 
                        (isOwner(userId) || isAdmin());
    }
    
    // Video sessions collection - active session management
    match /videoSessions/{sessionId} {
      allow read: if isAuthenticated() &&
                  (resource.data.clientId == request.auth.uid ||
                   resource.data.therapistId == request.auth.uid ||
                   isAdmin());
      
      // Only system can create video sessions (via cloud functions)
      allow create: if isAdmin();
      
      // Participants can update session state during active window
      allow update: if isAuthenticated() &&
                    (resource.data.clientId == request.auth.uid ||
                     resource.data.therapistId == request.auth.uid) &&
                    request.time >= resource.data.scheduledStart - duration.value(30, 'm') &&
                    request.time <= resource.data.scheduledEnd + duration.value(30, 'm') &&
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['connectionStatus', 'participantStatus', 'qualityMetrics', 'lastActivity', 'updatedAt']);
      
      allow delete: if isAdmin();
    }
    
    // Real-time synchronization data
    match /realtimeSync/{syncId} {
      allow read: if isAuthenticated() &&
                  resource.data.participants.hasAny([request.auth.uid]);
      
      allow create: if isAuthenticated() &&
                    request.resource.data.participants.hasAny([request.auth.uid]);
      
      allow update: if isAuthenticated() &&
                    resource.data.participants.hasAny([request.auth.uid]) &&
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['syncState', 'conflictData', 'lastSync', 'performanceMetrics']);
      
      allow delete: if isAdmin();
    }
    
    // Therapist real-time status and availability
    match /therapistStatus/{therapistId} {
      allow read: if isAuthenticated(); // Clients need to see online status
      
      allow write: if isAuthenticated() &&
                   isOwner(therapistId) &&
                   isTherapist();
      
      allow update: if isAuthenticated() &&
                    isOwner(therapistId) &&
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['isOnline', 'lastSeen', 'currentLoad', 'availableSlots', 'conflictResolution']);
    }
    
    // Performance monitoring collection
    match /performanceMetrics/{metricId} {
      allow read: if isAuthenticated() &&
                  (resource.data.userId == request.auth.uid || isAdmin());
      
      allow create: if isAuthenticated() &&
                    request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() &&
                    resource.data.userId == request.auth.uid &&
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['metrics', 'timestamp', 'sessionData']);
      
      allow delete: if isAdmin();
    }
    
    // Security and audit logging
    match /securityEvents/{eventId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // For logging security events
      allow write: if isAdmin();
    }
    
    // System configuration (admin only)
    match /systemConfig/{configId} {
      allow read, write: if isAdmin();
    }
    
    // Rate limiting and API usage tracking
    match /apiUsage/{usageId} {
      allow read: if isAuthenticated() &&
                  (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated(); // For tracking API calls
      allow write: if isAdmin();
    }
    
    // Therapist availability with real-time sync
    match /therapistProfiles/{therapistId}/realtimeAvailability/{availId} {
      allow read: if isAuthenticated(); // Clients need to see availability
      allow write: if isAuthenticated() &&
                   isOwner(therapistId) &&
                   isTherapist();
      allow update: if isAuthenticated() &&
                    isOwner(therapistId) &&
                    request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['slots', 'lastUpdated', 'syncMetadata', 'conflictResolution']);
    }
    
    // Legacy message subcollection compatibility
    match /appointments/{appointmentId}/messages/{messageId} {
      allow read: if isAuthenticated() &&
                  (isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.clientId) ||
                   isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.therapistId) ||
                   isAdmin());
      allow create: if isAuthenticated() &&
                    (isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.clientId) ||
                     isOwner(get(/databases/$(database)/documents/appointments/$(appointmentId)).data.therapistId));
    }
  }
}