rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Enhanced Helper functions with video session support
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid))
             ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role
             : null;
    }
    
    function isOwner(resourceUserId) {
      return isAuthenticated() && request.auth.uid == resourceUserId;
    }
    
    function isTherapist() {
      return isAuthenticated() && getUserRole() == 'therapist';
    }
    
    function isClient() {
      return isAuthenticated() && getUserRole() == 'client';
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    // Video session security functions
    function isAppointmentParticipant(appointmentData) {
      return isAuthenticated() &&
        (appointmentData.clientId == request.auth.uid ||
         appointmentData.therapistId == request.auth.uid);
    }
    
    function canAccessVideoSession(appointmentData) {
      return isAppointmentParticipant(appointmentData) &&
        appointmentData.status == 'confirmed' &&
        appointmentData.session.type == 'video';
    }
    
    function isVideoSessionActive(appointmentData) {
      return canAccessVideoSession(appointmentData) &&
        // Allow access 30 minutes before to 30 minutes after appointment
        request.time >= appointmentData.scheduledFor - duration.value(30, 'm') &&
        request.time <= appointmentData.scheduledFor + duration.value(appointmentData.duration + 30, 'm');
    }
    
    function validateUserCreate() {
      let requiredFields = ['email', 'profile', 'role', 'status', 'preferences', 'metadata'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.role in ['client', 'therapist', 'admin'] &&
             request.resource.data.status in ['active', 'inactive', 'suspended'];
    }
    
    function validateUserUpdate() {
      // Prevent role changes except by admin
      return !('role' in request.resource.data.diff(resource.data).affectedKeys()) ||
             isAdmin();
    }
    
    function validateAppointmentCreate() {
      let requiredFields = ['therapistId', 'clientId', 'scheduledFor', 'timeSlotId', 'duration', 'status'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.status in ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled', 'no_show'] &&
             request.resource.data.clientId == request.auth.uid;
    }
    
    function validateAppointmentUpdate() {
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      
      // Allow status changes by participants or admin
      return (affectedKeys.hasAny(['status']) && 
              ((isTherapist() && resource.data.therapistId == request.auth.uid) ||
               (isClient() && resource.data.clientId == request.auth.uid) ||
               isAdmin())) ||
             // Session credential updates (only system/admin)
             (affectedKeys.hasAny(['session.channelId', 'session.accessToken', 'session.joinUrl']) && 
              isAdmin()) ||
             // Session state updates during active sessions
             (affectedKeys.hasAny(['session.connectionStatus', 'session.qualityMetrics']) && 
              isVideoSessionActive(resource.data)) ||
             // Allow other updates by participants (for fields not covered above)
             (!affectedKeys.hasAny(['status', 'session.channelId', 'session.accessToken', 'session.joinUrl', 'session.connectionStatus', 'session.qualityMetrics']) &&
              (resource.data.clientId == request.auth.uid ||
               resource.data.therapistId == request.auth.uid ||
               isAdmin()));
    }
    
    // Users collection - FIXED: Allow creation without role validation during signup
    match /users/{userId} {
      allow read: if isAuthenticated() && 
                  (request.auth.uid == userId || isAdmin());
      
      // Allow initial user creation during signup (before role is set)
      allow create: if isAuthenticated() && 
                    request.auth.uid == userId;
      
      allow update: if isAuthenticated() && 
                    request.auth.uid == userId &&
                    validateUserUpdate();
      
      allow delete: if isAdmin();
    }
    
    // Therapist profiles - FIXED: Allow therapists to read their own profile
    match /therapistProfiles/{therapistId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() && 
                    request.auth.uid == therapistId;
      
      allow update: if isAuthenticated() && 
                    (request.auth.uid == therapistId || isAdmin());
      
      allow delete: if isAdmin();
    }
    
    // Appointments - FIXED: Improved validation and access control
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() &&
                  (resource.data.clientId == request.auth.uid ||
                   resource.data.therapistId == request.auth.uid ||
                   isAdmin());
      
      allow create: if isAuthenticated() &&
                    validateAppointmentCreate();
      
      allow update: if isAuthenticated() &&
                    (resource.data.clientId == request.auth.uid ||
                     resource.data.therapistId == request.auth.uid ||
                     isAdmin()) &&
                    validateAppointmentUpdate();
      
      allow delete: if isAdmin();
      
      // Video session credentials - FIXED: Better error handling
      match /sessionCredentials/{credentialId} {
        allow read: if isAuthenticated() &&
                    exists(/databases/$(database)/documents/appointments/$(appointmentId)) &&
                    isVideoSessionActive(get(/databases/$(database)/documents/appointments/$(appointmentId)).data) &&
                    isAppointmentParticipant(get(/databases/$(database)/documents/appointments/$(appointmentId)).data);
        allow write: if isAdmin();
      }
      
      // Session monitoring data - FIXED: Better validation
      match /sessionMetrics/{metricId} {
        allow read: if isAuthenticated() &&
                    exists(/databases/$(database)/documents/appointments/$(appointmentId)) &&
                    (isAppointmentParticipant(get(/databases/$(database)/documents/appointments/$(appointmentId)).data) ||
                     isAdmin());
        
        allow create: if isAuthenticated() &&
                      exists(/databases/$(database)/documents/appointments/$(appointmentId)) &&
                      isAppointmentParticipant(get(/databases/$(database)/documents/appointments/$(appointmentId)).data);
        
        allow update: if isAuthenticated() &&
                      exists(/databases/$(database)/documents/appointments/$(appointmentId)) &&
                      isAppointmentParticipant(get(/databases/$(database)/documents/appointments/$(appointmentId)).data);
        
        allow delete: if isAdmin();
      }
      
      // Messages subcollection - FIXED: Simplified validation
      match /messages/{messageId} {
        allow read: if isAuthenticated() &&
                    exists(/databases/$(database)/documents/appointments/$(appointmentId)) &&
                    (get(/databases/$(database)/documents/appointments/$(appointmentId)).data.clientId == request.auth.uid ||
                     get(/databases/$(database)/documents/appointments/$(appointmentId)).data.therapistId == request.auth.uid ||
                     isAdmin());
        
        allow create: if isAuthenticated() &&
                      exists(/databases/$(database)/documents/appointments/$(appointmentId)) &&
                      (get(/databases/$(database)/documents/appointments/$(appointmentId)).data.clientId == request.auth.uid ||
                       get(/databases/$(database)/documents/appointments/$(appointmentId)).data.therapistId == request.auth.uid);
        
        allow update: if isAuthenticated() &&
                      resource.data.senderId == request.auth.uid;
        
        allow delete: if isAdmin();
      }
    }
    
    // Therapist availability - FIXED: Simplified validation
    match /therapistAvailability/{docId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
                    request.resource.data.therapistId == request.auth.uid;
      
      allow update: if isAuthenticated() &&
                    resource.data.therapistId == request.auth.uid;
      
      allow delete: if isAuthenticated() &&
                    (resource.data.therapistId == request.auth.uid || isAdmin());
    }
    
    // Schedule overrides - FIXED: Simplified validation
    match /scheduleOverrides/{docId} {
      allow read: if isAuthenticated();
      
      allow create: if isAuthenticated() &&
                    request.resource.data.therapistId == request.auth.uid;
      
      allow update: if isAuthenticated() &&
                    resource.data.therapistId == request.auth.uid;
      
      allow delete: if isAuthenticated() &&
                    (resource.data.therapistId == request.auth.uid || isAdmin());
    }
    
    // Time slots - read-only reference data
    match /timeSlots/{slotId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Audit logs - admin only
    match /auditLogs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Notifications - FIXED: Better validation
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                  (resource.data.userId == request.auth.uid || isAdmin());
      
      allow create: if isAuthenticated() &&
                    (request.resource.data.userId == request.auth.uid || isAdmin());
      
      allow update: if isAdmin();
      
      allow delete: if isAuthenticated() && 
                    (resource.data.userId == request.auth.uid || isAdmin());
    }
    
    // Payment intents - FIXED: Better validation
    match /paymentIntents/{paymentId} {
      allow read: if isAuthenticated() && 
                  (resource.data.clientId == request.auth.uid || 
                   resource.data.therapistId == request.auth.uid || 
                   isAdmin());
      
      allow create: if isAuthenticated() && 
                    (request.resource.data.clientId == request.auth.uid || isAdmin());
      
      allow update: if isAdmin();
      
      allow delete: if isAdmin();
    }
    
    // User notifications subcollection - FIXED
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                  (request.auth.uid == userId || isAdmin());
      
      allow create: if isAuthenticated() &&
                    (request.auth.uid == userId || isAdmin());
      
      allow update, delete: if isAuthenticated() && 
                           (request.auth.uid == userId || isAdmin());
    }
    
    // Video sessions collection - FIXED: Better validation
    match /videoSessions/{sessionId} {
      allow read: if isAuthenticated() &&
                  (resource.data.clientId == request.auth.uid ||
                   resource.data.therapistId == request.auth.uid ||
                   isAdmin());
      
      allow create: if isAdmin();
      
      allow update: if isAuthenticated() &&
                    (resource.data.clientId == request.auth.uid ||
                     resource.data.therapistId == request.auth.uid ||
                     isAdmin());
      
      allow delete: if isAdmin();
    }
    
    // Real-time synchronization data - FIXED
    match /realtimeSync/{syncId} {
      allow read: if isAuthenticated() &&
                  (request.auth.uid in resource.data.participants);
      
      allow create: if isAuthenticated() &&
                    (request.auth.uid in request.resource.data.participants);
      
      allow update: if isAuthenticated() &&
                    (request.auth.uid in resource.data.participants);
      
      allow delete: if isAdmin();
    }
    
    // Therapist status - FIXED: Simplified validation
    match /therapistStatus/{therapistId} {
      allow read: if isAuthenticated();
      
      allow create, update: if isAuthenticated() &&
                           request.auth.uid == therapistId;
      
      allow delete: if isAdmin();
    }
    
    // Performance metrics - FIXED
    match /performanceMetrics/{metricId} {
      allow read: if isAuthenticated() &&
                  (resource.data.userId == request.auth.uid || isAdmin());
      
      allow create: if isAuthenticated() &&
                    request.resource.data.userId == request.auth.uid;
      
      allow update: if isAuthenticated() &&
                    resource.data.userId == request.auth.uid;
      
      allow delete: if isAdmin();
    }
    
    // Security events - FIXED
    match /securityEvents/{eventId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // System configuration
    match /systemConfig/{configId} {
      allow read, write: if isAdmin();
    }
    
    // API usage tracking - FIXED
    match /apiUsage/{usageId} {
      allow read: if isAuthenticated() &&
                  (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // Therapist real-time availability - FIXED
    match /therapistProfiles/{therapistId}/realtimeAvailability/{availId} {
      allow read: if isAuthenticated();
      
      allow create, update: if isAuthenticated() &&
                           request.auth.uid == therapistId;
      
      allow delete: if isAuthenticated() &&
                    (request.auth.uid == therapistId || isAdmin());
    }
    
    // Test collection for debugging
    match /test/{docId} {
      allow read, write: if isAuthenticated();
    }
  }
}